{"ast":null,"code":"/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @param  {InterfaceAdapter}      interfaceAdapter a new helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function (res, web3, _interfaceAdapter) {\n    //I'm not sure why interfaceAdapter is here if it's not used,\n    //so I just put an underscore in front of its name for now...\n    if (!res || !res.error && !res.result) return;\n    const errorStringHash = \"0x08c379a0\";\n    const isObject = res && typeof res === \"object\" && res.error && res.error.data;\n    const isString = res && typeof res === \"object\" && typeof res.result === \"string\";\n\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n\n      if (data[hash].return && data[hash].return.includes(errorStringHash)) {\n        try {\n          return web3.eth.abi.decodeParameter(\"string\", data[hash].return.slice(10));\n        } catch (_) {\n          return undefined;\n        }\n      }\n    } else if (isString && res.result.includes(errorStringHash)) {\n      try {\n        return web3.eth.abi.decodeParameter(\"string\", res.result.slice(10));\n      } catch (_) {\n        return undefined;\n      }\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @param  {Object} interfaceAdapter\n   * @return {String|Undefined}\n   */\n  get: function (params, web3, interfaceAdapter) {\n    const packet = {\n      jsonrpc: \"2.0\",\n      method: \"eth_call\",\n      params: [params, \"latest\"],\n      id: new Date().getTime()\n    };\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3, interfaceAdapter);\n\n        resolve(reasonString);\n      });\n    });\n  }\n};\nmodule.exports = reason;","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/@truffle/contract/lib/reason.js"],"names":["reason","_extract","res","web3","_interfaceAdapter","error","result","errorStringHash","isObject","data","isString","hash","Object","keys","return","includes","eth","abi","decodeParameter","slice","_","undefined","get","params","interfaceAdapter","packet","jsonrpc","method","id","Date","getTime","Promise","resolve","currentProvider","send","err","response","reasonString","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,MAAM,GAAG;AACb;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,EAAE,UAASC,GAAT,EAAcC,IAAd,EAAoBC,iBAApB,EAAuC;AAC/C;AACA;AACA,QAAI,CAACF,GAAD,IAAS,CAACA,GAAG,CAACG,KAAL,IAAc,CAACH,GAAG,CAACI,MAAhC,EAAyC;AAEzC,UAAMC,eAAe,GAAG,YAAxB;AAEA,UAAMC,QAAQ,GACZN,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkCA,GAAG,CAACG,KAAtC,IAA+CH,GAAG,CAACG,KAAJ,CAAUI,IAD3D;AAEA,UAAMC,QAAQ,GACZR,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkC,OAAOA,GAAG,CAACI,MAAX,KAAsB,QAD1D;;AAGA,QAAIE,QAAJ,EAAc;AACZ,YAAMC,IAAI,GAAGP,GAAG,CAACG,KAAJ,CAAUI,IAAvB;AACA,YAAME,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkB,CAAlB,CAAb;;AAEA,UAAIA,IAAI,CAACE,IAAD,CAAJ,CAAWG,MAAX,IAAqBL,IAAI,CAACE,IAAD,CAAJ,CAAWG,MAAX,CAAkBC,QAAlB,CAA2BR,eAA3B,CAAzB,EAAsE;AACpE,YAAI;AACF,iBAAOJ,IAAI,CAACa,GAAL,CAASC,GAAT,CAAaC,eAAb,CACL,QADK,EAELT,IAAI,CAACE,IAAD,CAAJ,CAAWG,MAAX,CAAkBK,KAAlB,CAAwB,EAAxB,CAFK,CAAP;AAID,SALD,CAKE,OAAOC,CAAP,EAAU;AACV,iBAAOC,SAAP;AACD;AACF;AACF,KAdD,MAcO,IAAIX,QAAQ,IAAIR,GAAG,CAACI,MAAJ,CAAWS,QAAX,CAAoBR,eAApB,CAAhB,EAAsD;AAC3D,UAAI;AACF,eAAOJ,IAAI,CAACa,GAAL,CAASC,GAAT,CAAaC,eAAb,CAA6B,QAA7B,EAAuChB,GAAG,CAACI,MAAJ,CAAWa,KAAX,CAAiB,EAAjB,CAAvC,CAAP;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,eAAOC,SAAP;AACD;AACF;AACF,GAzCY;;AA2Cb;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,GAAG,EAAE,UAASC,MAAT,EAAiBpB,IAAjB,EAAuBqB,gBAAvB,EAAyC;AAC5C,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE,KADI;AAEbC,MAAAA,MAAM,EAAE,UAFK;AAGbJ,MAAAA,MAAM,EAAE,CAACA,MAAD,EAAS,QAAT,CAHK;AAIbK,MAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX;AAJS,KAAf;AAOA,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B7B,MAAAA,IAAI,CAAC8B,eAAL,CAAqBC,IAArB,CAA0BT,MAA1B,EAAkC,CAACU,GAAD,EAAMC,QAAN,KAAmB;AACnD,cAAMC,YAAY,GAAGrC,MAAM,CAACC,QAAP,CAAgBmC,QAAhB,EAA0BjC,IAA1B,EAAgCqB,gBAAhC,CAArB;;AACAQ,QAAAA,OAAO,CAACK,YAAD,CAAP;AACD,OAHD;AAID,KALM,CAAP;AAMD;AA/DY,CAAf;AAkEAC,MAAM,CAACC,OAAP,GAAiBvC,MAAjB","sourcesContent":["/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\n\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @param  {InterfaceAdapter}      interfaceAdapter a new helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function(res, web3, _interfaceAdapter) {\n    //I'm not sure why interfaceAdapter is here if it's not used,\n    //so I just put an underscore in front of its name for now...\n    if (!res || (!res.error && !res.result)) return;\n\n    const errorStringHash = \"0x08c379a0\";\n\n    const isObject =\n      res && typeof res === \"object\" && res.error && res.error.data;\n    const isString =\n      res && typeof res === \"object\" && typeof res.result === \"string\";\n\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n\n      if (data[hash].return && data[hash].return.includes(errorStringHash)) {\n        try {\n          return web3.eth.abi.decodeParameter(\n            \"string\",\n            data[hash].return.slice(10)\n          );\n        } catch (_) {\n          return undefined;\n        }\n      }\n    } else if (isString && res.result.includes(errorStringHash)) {\n      try {\n        return web3.eth.abi.decodeParameter(\"string\", res.result.slice(10));\n      } catch (_) {\n        return undefined;\n      }\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @param  {Object} interfaceAdapter\n   * @return {String|Undefined}\n   */\n  get: function(params, web3, interfaceAdapter) {\n    const packet = {\n      jsonrpc: \"2.0\",\n      method: \"eth_call\",\n      params: [params, \"latest\"],\n      id: new Date().getTime()\n    };\n\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3, interfaceAdapter);\n        resolve(reasonString);\n      });\n    });\n  }\n};\n\nmodule.exports = reason;\n"]},"metadata":{},"sourceType":"script"}