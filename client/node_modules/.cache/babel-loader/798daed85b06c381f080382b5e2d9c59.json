{"ast":null,"code":"function subArrayContains(tab, upperBound, includeValue) {\n  for (let idx = 0; idx < upperBound; ++idx) {\n    if (includeValue(tab[idx])) return true;\n  }\n\n  return false;\n}\n\nfunction swap(tab, idx1, idx2) {\n  const temp = tab[idx1];\n  tab[idx1] = tab[idx2];\n  tab[idx2] = temp;\n}\n\nexport function buildCompareFilter(compare) {\n  return tab => {\n    let finalLength = tab.length;\n\n    for (let idx = tab.length - 1; idx !== -1; --idx) {\n      if (subArrayContains(tab, idx, t => compare(t.value_, tab[idx].value_))) {\n        --finalLength;\n        swap(tab, idx, finalLength);\n      }\n    }\n\n    return tab.slice(0, finalLength);\n  };\n}","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BuildCompareFilter.js"],"names":["subArrayContains","tab","upperBound","includeValue","idx","swap","idx1","idx2","temp","buildCompareFilter","compare","finalLength","length","t","value_","slice"],"mappings":"AAAA,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,YAA3C,EAAyD;AACrD,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,UAAxB,EAAoC,EAAEE,GAAtC,EAA2C;AACvC,QAAID,YAAY,CAACF,GAAG,CAACG,GAAD,CAAJ,CAAhB,EACI,OAAO,IAAP;AACP;;AACD,SAAO,KAAP;AACH;;AACD,SAASC,IAAT,CAAcJ,GAAd,EAAmBK,IAAnB,EAAyBC,IAAzB,EAA+B;AAC3B,QAAMC,IAAI,GAAGP,GAAG,CAACK,IAAD,CAAhB;AACAL,EAAAA,GAAG,CAACK,IAAD,CAAH,GAAYL,GAAG,CAACM,IAAD,CAAf;AACAN,EAAAA,GAAG,CAACM,IAAD,CAAH,GAAYC,IAAZ;AACH;;AACD,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AACxC,SAAQT,GAAD,IAAS;AACZ,QAAIU,WAAW,GAAGV,GAAG,CAACW,MAAtB;;AACA,SAAK,IAAIR,GAAG,GAAGH,GAAG,CAACW,MAAJ,GAAa,CAA5B,EAA+BR,GAAG,KAAK,CAAC,CAAxC,EAA2C,EAAEA,GAA7C,EAAkD;AAC9C,UAAIJ,gBAAgB,CAACC,GAAD,EAAMG,GAAN,EAAYS,CAAD,IAAOH,OAAO,CAACG,CAAC,CAACC,MAAH,EAAWb,GAAG,CAACG,GAAD,CAAH,CAASU,MAApB,CAAzB,CAApB,EAA2E;AACvE,UAAEH,WAAF;AACAN,QAAAA,IAAI,CAACJ,GAAD,EAAMG,GAAN,EAAWO,WAAX,CAAJ;AACH;AACJ;;AACD,WAAOV,GAAG,CAACc,KAAJ,CAAU,CAAV,EAAaJ,WAAb,CAAP;AACH,GATD;AAUH","sourcesContent":["function subArrayContains(tab, upperBound, includeValue) {\n    for (let idx = 0; idx < upperBound; ++idx) {\n        if (includeValue(tab[idx]))\n            return true;\n    }\n    return false;\n}\nfunction swap(tab, idx1, idx2) {\n    const temp = tab[idx1];\n    tab[idx1] = tab[idx2];\n    tab[idx2] = temp;\n}\nexport function buildCompareFilter(compare) {\n    return (tab) => {\n        let finalLength = tab.length;\n        for (let idx = tab.length - 1; idx !== -1; --idx) {\n            if (subArrayContains(tab, idx, (t) => compare(t.value_, tab[idx].value_))) {\n                --finalLength;\n                swap(tab, idx, finalLength);\n            }\n        }\n        return tab.slice(0, finalLength);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}