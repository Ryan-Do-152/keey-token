{"ast":null,"code":"import { convertFromNext } from '../check/arbitrary/definition/Converters.js';\nimport { SubarrayArbitrary } from './_internals/SubarrayArbitrary.js';\n\nfunction subarray(originalArray, ...args) {\n  if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n    return convertFromNext(new SubarrayArbitrary(originalArray, true, args[0], args[1]));\n  }\n\n  const ct = args[0];\n  const minLength = ct !== undefined && ct.minLength !== undefined ? ct.minLength : 0;\n  const maxLength = ct !== undefined && ct.maxLength !== undefined ? ct.maxLength : originalArray.length;\n  return convertFromNext(new SubarrayArbitrary(originalArray, true, minLength, maxLength));\n}\n\nexport { subarray };","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/fast-check/lib/esm/arbitrary/subarray.js"],"names":["convertFromNext","SubarrayArbitrary","subarray","originalArray","args","ct","minLength","undefined","maxLength","length"],"mappings":"AAAA,SAASA,eAAT,QAAgC,6CAAhC;AACA,SAASC,iBAAT,QAAkC,mCAAlC;;AACA,SAASC,QAAT,CAAkBC,aAAlB,EAAiC,GAAGC,IAApC,EAA0C;AACtC,MAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,IAA+B,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAtD,EAAgE;AAC5D,WAAOJ,eAAe,CAAC,IAAIC,iBAAJ,CAAsBE,aAAtB,EAAqC,IAArC,EAA2CC,IAAI,CAAC,CAAD,CAA/C,EAAoDA,IAAI,CAAC,CAAD,CAAxD,CAAD,CAAtB;AACH;;AACD,QAAMC,EAAE,GAAGD,IAAI,CAAC,CAAD,CAAf;AACA,QAAME,SAAS,GAAGD,EAAE,KAAKE,SAAP,IAAoBF,EAAE,CAACC,SAAH,KAAiBC,SAArC,GAAiDF,EAAE,CAACC,SAApD,GAAgE,CAAlF;AACA,QAAME,SAAS,GAAGH,EAAE,KAAKE,SAAP,IAAoBF,EAAE,CAACG,SAAH,KAAiBD,SAArC,GAAiDF,EAAE,CAACG,SAApD,GAAgEL,aAAa,CAACM,MAAhG;AACA,SAAOT,eAAe,CAAC,IAAIC,iBAAJ,CAAsBE,aAAtB,EAAqC,IAArC,EAA2CG,SAA3C,EAAsDE,SAAtD,CAAD,CAAtB;AACH;;AACD,SAASN,QAAT","sourcesContent":["import { convertFromNext } from '../check/arbitrary/definition/Converters.js';\nimport { SubarrayArbitrary } from './_internals/SubarrayArbitrary.js';\nfunction subarray(originalArray, ...args) {\n    if (typeof args[0] === 'number' && typeof args[1] === 'number') {\n        return convertFromNext(new SubarrayArbitrary(originalArray, true, args[0], args[1]));\n    }\n    const ct = args[0];\n    const minLength = ct !== undefined && ct.minLength !== undefined ? ct.minLength : 0;\n    const maxLength = ct !== undefined && ct.maxLength !== undefined ? ct.maxLength : originalArray.length;\n    return convertFromNext(new SubarrayArbitrary(originalArray, true, minLength, maxLength));\n}\nexport { subarray };\n"]},"metadata":{},"sourceType":"module"}