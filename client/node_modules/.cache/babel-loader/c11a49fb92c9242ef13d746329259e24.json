{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction toSubdomainLabelMapper([f, d]) {\n  return d === null ? f : `${f}${d[0]}${d[1]}`;\n}\n\nfunction toSubdomainLabelUnmapper(value) {\n  if (typeof value !== 'string' || value.length === 0) {\n    throw new Error('Unsupported');\n  }\n\n  if (value.length === 1) {\n    return [value[0], null];\n  }\n\n  return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\n\nfunction subdomainLabel() {\n  const alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n  const alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n  return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, {\n    maxLength: 61\n  }), alphaNumericArb)))).map(toSubdomainLabelMapper, toSubdomainLabelUnmapper).filter(filterInvalidSubdomainLabel));\n}\n\nfunction labelsMapper(elements) {\n  return `${elements[0].join('.')}.${elements[1]}`;\n}\n\nfunction labelsUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const lastDotIndex = value.lastIndexOf('.');\n  return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\n\nexport function domain() {\n  const alphaNumericArb = buildLowerAlphaArbitrary([]);\n  const publicSuffixArb = stringOf(alphaNumericArb, {\n    minLength: 2,\n    maxLength: 10\n  });\n  return convertFromNext(convertToNext(tuple(array(subdomainLabel(), {\n    minLength: 1,\n    maxLength: 5\n  }), publicSuffixArb)).map(labelsMapper, labelsUnmapper).filter(d => d.length <= 255));\n}","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/fast-check/lib/esm/arbitrary/domain.js"],"names":["array","buildLowerAlphaArbitrary","buildLowerAlphaNumericArbitrary","option","stringOf","tuple","filterInvalidSubdomainLabel","convertFromNext","convertToNext","toSubdomainLabelMapper","f","d","toSubdomainLabelUnmapper","value","length","Error","substring","subdomainLabel","alphaNumericArb","alphaNumericHyphenArb","maxLength","map","filter","labelsMapper","elements","join","labelsUnmapper","lastDotIndex","lastIndexOf","split","domain","publicSuffixArb","minLength"],"mappings":"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","sourcesContent":["import { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary, } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nfunction toSubdomainLabelMapper([f, d]) {\n    return d === null ? f : `${f}${d[0]}${d[1]}`;\n}\nfunction toSubdomainLabelUnmapper(value) {\n    if (typeof value !== 'string' || value.length === 0) {\n        throw new Error('Unsupported');\n    }\n    if (value.length === 1) {\n        return [value[0], null];\n    }\n    return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\nfunction subdomainLabel() {\n    const alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n    const alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n    return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, { maxLength: 61 }), alphaNumericArb))))\n        .map(toSubdomainLabelMapper, toSubdomainLabelUnmapper)\n        .filter(filterInvalidSubdomainLabel));\n}\nfunction labelsMapper(elements) {\n    return `${elements[0].join('.')}.${elements[1]}`;\n}\nfunction labelsUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported type');\n    }\n    const lastDotIndex = value.lastIndexOf('.');\n    return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\nexport function domain() {\n    const alphaNumericArb = buildLowerAlphaArbitrary([]);\n    const publicSuffixArb = stringOf(alphaNumericArb, { minLength: 2, maxLength: 10 });\n    return convertFromNext(convertToNext(tuple(array(subdomainLabel(), { minLength: 1, maxLength: 5 }), publicSuffixArb))\n        .map(labelsMapper, labelsUnmapper)\n        .filter((d) => d.length <= 255));\n}\n"]},"metadata":{},"sourceType":"module"}