{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\n\nfunction buildCompleteSetConstraints(constraints) {\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n  const compare = constraints.compare !== undefined ? constraints.compare : (a, b) => a === b;\n  return {\n    minLength,\n    maxLength,\n    compare\n  };\n}\n\nfunction extractSetConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const sargs = args;\n    if (typeof sargs[0] === 'number') return {\n      maxLength: sargs[0]\n    };\n    if (typeof sargs[0] === 'function') return {\n      compare: sargs[0]\n    };\n    return sargs[0];\n  }\n\n  if (args[2] === undefined) {\n    const sargs = args;\n    if (typeof sargs[1] === 'number') return {\n      minLength: sargs[0],\n      maxLength: sargs[1]\n    };\n    return {\n      maxLength: sargs[0],\n      compare: sargs[1]\n    };\n  }\n\n  const sargs = args;\n  return {\n    minLength: sargs[0],\n    maxLength: sargs[1],\n    compare: sargs[2]\n  };\n}\n\nfunction set(arb, ...args) {\n  const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n  const minLength = constraints.minLength;\n  const maxLength = constraints.maxLength;\n  const compare = constraints.compare;\n  const nextArb = convertToNext(arb);\n  const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength, compare));\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(tab => tab.length >= minLength);\n}\n\nexport { set };","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/fast-check/lib/esm/arbitrary/set.js"],"names":["ArrayArbitrary","convertFromNext","convertToNext","maxLengthFromMinLength","buildCompleteSetConstraints","constraints","minLength","undefined","maxLength","compare","a","b","extractSetConstraints","args","sargs","set","arb","nextArb","arrayArb","filter","tab","length"],"mappings":"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","sourcesContent":["import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction buildCompleteSetConstraints(constraints) {\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n    const compare = constraints.compare !== undefined ? constraints.compare : (a, b) => a === b;\n    return { minLength, maxLength, compare };\n}\nfunction extractSetConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const sargs = args;\n        if (typeof sargs[0] === 'number')\n            return { maxLength: sargs[0] };\n        if (typeof sargs[0] === 'function')\n            return { compare: sargs[0] };\n        return sargs[0];\n    }\n    if (args[2] === undefined) {\n        const sargs = args;\n        if (typeof sargs[1] === 'number')\n            return { minLength: sargs[0], maxLength: sargs[1] };\n        return { maxLength: sargs[0], compare: sargs[1] };\n    }\n    const sargs = args;\n    return { minLength: sargs[0], maxLength: sargs[1], compare: sargs[2] };\n}\nfunction set(arb, ...args) {\n    const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n    const minLength = constraints.minLength;\n    const maxLength = constraints.maxLength;\n    const compare = constraints.compare;\n    const nextArb = convertToNext(arb);\n    const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength, compare));\n    if (minLength === 0)\n        return arrayArb;\n    return arrayArb.filter((tab) => tab.length >= minLength);\n}\nexport { set };\n"]},"metadata":{},"sourceType":"module"}