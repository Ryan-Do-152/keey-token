{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { extractStringConstraints } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\n\nfunction extractMinMaxConstraints(args) {\n  const constraints = extractStringConstraints(args);\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n  return {\n    minLength,\n    maxLength\n  };\n}\n\nfunction base64String(...args) {\n  const constraints = extractMinMaxConstraints(args);\n  const unscaledMinLength = constraints.minLength;\n  const unscaledMaxLength = constraints.maxLength;\n  const minLength = unscaledMinLength + 3 - (unscaledMinLength + 3) % 4;\n  const maxLength = unscaledMaxLength - unscaledMaxLength % 4;\n  if (minLength > maxLength) throw new Error('Minimal length should be inferior or equal to maximal length');\n  if (minLength % 4 !== 0) throw new Error('Minimal length of base64 strings must be a multiple of 4');\n  if (maxLength % 4 !== 0) throw new Error('Maximal length of base64 strings must be a multiple of 4');\n  return convertFromNext(convertToNext(array(base64(), {\n    minLength,\n    maxLength\n  })).map(codePointsToStringMapper, codePointsToStringUnmapper).map(stringToBase64Mapper, stringToBase64Unmapper));\n}\n\nexport { base64String };","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/fast-check/lib/esm/arbitrary/base64String.js"],"names":["convertFromNext","convertToNext","array","base64","maxLengthFromMinLength","extractStringConstraints","codePointsToStringMapper","codePointsToStringUnmapper","stringToBase64Mapper","stringToBase64Unmapper","extractMinMaxConstraints","args","constraints","minLength","undefined","maxLength","base64String","unscaledMinLength","unscaledMaxLength","Error","map"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,sBAAT,QAAuC,gDAAvC;AACA,SAASC,wBAAT,QAA0C,oDAA1C;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,QAA6D,wCAA7D;;AACA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AACpC,QAAMC,WAAW,GAAGP,wBAAwB,CAACM,IAAD,CAA5C;AACA,QAAME,SAAS,GAAGD,WAAW,CAACC,SAAZ,KAA0BC,SAA1B,GAAsCF,WAAW,CAACC,SAAlD,GAA8D,CAAhF;AACA,QAAME,SAAS,GAAGH,WAAW,CAACG,SAAZ,KAA0BD,SAA1B,GAAsCF,WAAW,CAACG,SAAlD,GAA8DX,sBAAsB,CAACS,SAAD,CAAtG;AACA,SAAO;AAAEA,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAP;AACH;;AACD,SAASC,YAAT,CAAsB,GAAGL,IAAzB,EAA+B;AAC3B,QAAMC,WAAW,GAAGF,wBAAwB,CAACC,IAAD,CAA5C;AACA,QAAMM,iBAAiB,GAAGL,WAAW,CAACC,SAAtC;AACA,QAAMK,iBAAiB,GAAGN,WAAW,CAACG,SAAtC;AACA,QAAMF,SAAS,GAAGI,iBAAiB,GAAG,CAApB,GAAyB,CAACA,iBAAiB,GAAG,CAArB,IAA0B,CAArE;AACA,QAAMF,SAAS,GAAGG,iBAAiB,GAAIA,iBAAiB,GAAG,CAA3D;AACA,MAAIL,SAAS,GAAGE,SAAhB,EACI,MAAM,IAAII,KAAJ,CAAU,8DAAV,CAAN;AACJ,MAAIN,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EACI,MAAM,IAAIM,KAAJ,CAAU,0DAAV,CAAN;AACJ,MAAIJ,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EACI,MAAM,IAAII,KAAJ,CAAU,0DAAV,CAAN;AACJ,SAAOnB,eAAe,CAACC,aAAa,CAACC,KAAK,CAACC,MAAM,EAAP,EAAW;AAAEU,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAX,CAAN,CAAb,CAClBK,GADkB,CACdd,wBADc,EACYC,0BADZ,EAElBa,GAFkB,CAEdZ,oBAFc,EAEQC,sBAFR,CAAD,CAAtB;AAGH;;AACD,SAASO,YAAT","sourcesContent":["import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\nfunction extractMinMaxConstraints(args) {\n    const constraints = extractStringConstraints(args);\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n    return { minLength, maxLength };\n}\nfunction base64String(...args) {\n    const constraints = extractMinMaxConstraints(args);\n    const unscaledMinLength = constraints.minLength;\n    const unscaledMaxLength = constraints.maxLength;\n    const minLength = unscaledMinLength + 3 - ((unscaledMinLength + 3) % 4);\n    const maxLength = unscaledMaxLength - (unscaledMaxLength % 4);\n    if (minLength > maxLength)\n        throw new Error('Minimal length should be inferior or equal to maximal length');\n    if (minLength % 4 !== 0)\n        throw new Error('Minimal length of base64 strings must be a multiple of 4');\n    if (maxLength % 4 !== 0)\n        throw new Error('Maximal length of base64 strings must be a multiple of 4');\n    return convertFromNext(convertToNext(array(base64(), { minLength, maxLength }))\n        .map(codePointsToStringMapper, codePointsToStringUnmapper)\n        .map(stringToBase64Mapper, stringToBase64Unmapper));\n}\nexport { base64String };\n"]},"metadata":{},"sourceType":"module"}