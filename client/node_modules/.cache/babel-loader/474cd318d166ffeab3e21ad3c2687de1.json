{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction dotMapper(a) {\n  return a.join('.');\n}\n\nfunction dotUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('.');\n}\n\nfunction atMapper(data) {\n  return `${data[0]}@${data[1]}`;\n}\n\nfunction atUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('@', 2);\n}\n\nexport function emailAddress() {\n  const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n  const atextArb = buildLowerAlphaNumericArbitrary(others);\n  const localPartArb = convertFromNext(convertToNext(array(stringOf(atextArb, {\n    minLength: 1,\n    maxLength: 10\n  }), {\n    minLength: 1,\n    maxLength: 5\n  })).map(dotMapper, dotUnmapper).filter(lp => lp.length <= 64));\n  return convertFromNext(convertToNext(tuple(localPartArb, domain())).map(atMapper, atUnmapper));\n}","map":{"version":3,"sources":["/Users/thienma/Documents/GitHub/keey-token/client/node_modules/fast-check/lib/esm/arbitrary/emailAddress.js"],"names":["array","buildLowerAlphaNumericArbitrary","domain","stringOf","tuple","convertFromNext","convertToNext","dotMapper","a","join","dotUnmapper","value","Error","split","atMapper","data","atUnmapper","emailAddress","others","atextArb","localPartArb","minLength","maxLength","map","filter","lp","length"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,+BAAT,QAAgD,yDAAhD;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,6CAA/C;;AACA,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AAClB,SAAOA,CAAC,CAACC,IAAF,CAAO,GAAP,CAAP;AACH;;AACD,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;;AACD,SAAOD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAP;AACH;;AACD,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAQ,GAAEA,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,EAA7B;AACH;;AACD,SAASC,UAAT,CAAoBL,KAApB,EAA2B;AACvB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACH;;AACD,SAAOD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAP;AACH;;AACD,OAAO,SAASI,YAAT,GAAwB;AAC3B,QAAMC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,CAAf;AACA,QAAMC,QAAQ,GAAGlB,+BAA+B,CAACiB,MAAD,CAAhD;AACA,QAAME,YAAY,GAAGf,eAAe,CAACC,aAAa,CAACN,KAAK,CAACG,QAAQ,CAACgB,QAAD,EAAW;AAAEE,IAAAA,SAAS,EAAE,CAAb;AAAgBC,IAAAA,SAAS,EAAE;AAA3B,GAAX,CAAT,EAAsD;AAAED,IAAAA,SAAS,EAAE,CAAb;AAAgBC,IAAAA,SAAS,EAAE;AAA3B,GAAtD,CAAN,CAAb,CAChCC,GADgC,CAC5BhB,SAD4B,EACjBG,WADiB,EAEhCc,MAFgC,CAExBC,EAAD,IAAQA,EAAE,CAACC,MAAH,IAAa,EAFI,CAAD,CAApC;AAGA,SAAOrB,eAAe,CAACC,aAAa,CAACF,KAAK,CAACgB,YAAD,EAAelB,MAAM,EAArB,CAAN,CAAb,CAA6CqB,GAA7C,CAAiDT,QAAjD,EAA2DE,UAA3D,CAAD,CAAtB;AACH","sourcesContent":["import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nfunction dotMapper(a) {\n    return a.join('.');\n}\nfunction dotUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('.');\n}\nfunction atMapper(data) {\n    return `${data[0]}@${data[1]}`;\n}\nfunction atUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('@', 2);\n}\nexport function emailAddress() {\n    const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n    const atextArb = buildLowerAlphaNumericArbitrary(others);\n    const localPartArb = convertFromNext(convertToNext(array(stringOf(atextArb, { minLength: 1, maxLength: 10 }), { minLength: 1, maxLength: 5 }))\n        .map(dotMapper, dotUnmapper)\n        .filter((lp) => lp.length <= 64));\n    return convertFromNext(convertToNext(tuple(localPartArb, domain())).map(atMapper, atUnmapper));\n}\n"]},"metadata":{},"sourceType":"module"}